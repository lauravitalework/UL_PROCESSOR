using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;

namespace UL_PROCESSOR
{
    class UL_CLASS_DAY_PROCESSOR_Program
    {
        public DateTime day;
        public Config configInfo;

        public UL_CLASS_DAY_PROCESSOR_Program(Config c, DateTime d)
        {
            configInfo = c;
            day = d;
        }


    }
    class UL_CLASS_PROCESSOR_Program
    {
        public Config configInfo;
        public List<DateTime> days;
        public Boolean doSummary = true;
        public String fileName = "V1";
        public UL_CLASS_PROCESSOR_Program(Config c, List<DateTime> d, String fName)
        {
            configInfo = c;
            days = d;
            configInfo.readMappings();
            fileName = fName;
        }
        public void processV2()
        {
            List<ClassroomDay> cds = new List<ClassroomDay>();
            int pos = 0;
            int count = 3;

            int countSets = 0;
            foreach (DateTime day in days)
            {

                ClassroomDay cd = new ClassroomDay(day, configInfo);
                Console.WriteLine("PROCESSING " + configInfo.classroom + " " + day.ToShortDateString());
                Console.WriteLine("readUbiFile (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                Dictionary<String, List<PersonInfo>> rawUbi = cd.readUbiFile();
                Console.WriteLine("readUbiTagFile (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                Tuple<Dictionary<String, List<PersonInfo>>, Dictionary<String, List<PersonInfo>>> rawTags = cd.readUbiTagFile();
                Console.WriteLine("readLenaFile (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                Dictionary<String, List<PersonInfo>> rawLena = cd.readLenaFile();
                Console.WriteLine("setUbiData (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.setUbiData(rawUbi);
                Console.WriteLine("setUbiTagData (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.setUbiTagData(rawTags.Item1, rawTags.Item2);
                Console.WriteLine("setLenaData (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.setLenaData(rawLena);

                DateTime trunkAt = cd.getTrunkTime();
                Console.WriteLine("countInteractions (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.countInteractions(false, true, true, trunkAt, rawLena); //count interactions but no need to write a file
                Console.WriteLine("write10SecTalkingCSV (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.write10SecTalkingCSV(configInfo.root + configInfo.classroom + "/SYNC/" + "10THOFSECTALKING_" + day.Month + "_" + day.Day + "_" + day.Year + ".CSV"); //write complete data files to disc
                cds.Add(cd);

                pos++;
                count++;
                if (pos == 3)
                {
                    summarize(cds, countSets, count == days.Count);

                    cds = new List<ClassroomDay>() { cds[cds.Count - 1] };
                    pos = 0;
                    countSets++;
                }


                //cd.writeMergedFile();
            }
            if (pos > 0)
            {
                summarize(cds, countSets, count == days.Count);
            }


        }
        public void process(Boolean processLast)
        {
            List<ClassroomDay> cds = new List<ClassroomDay>();
            int pos = 0;
            int count = 3;

            int countSets = 0;
            foreach (DateTime day in days)
            {

                ClassroomDay cd = new ClassroomDay(day, configInfo);
                Console.WriteLine("PROCESSING " + configInfo.classroom + " " + day.ToShortDateString());
                Console.WriteLine("readUbiFile (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                Dictionary<String, List<PersonInfo>> rawUbi = cd.readUbiFile();
                Console.WriteLine("readUbiTagFile (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                Tuple<Dictionary<String, List<PersonInfo>>, Dictionary<String, List<PersonInfo>>> rawTags = cd.readUbiTagFile();
                Console.WriteLine("readLenaFile (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                Dictionary<String, List<PersonInfo>> rawLena = cd.readLenaFile();
                Console.WriteLine("setUbiData (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.setUbiData(rawUbi);
                Console.WriteLine("setUbiTagData (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.setUbiTagData(rawTags.Item1, rawTags.Item2);
                Console.WriteLine("setLenaData (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.setLenaData(rawLena);

                DateTime trunkAt = cd.getTrunkTime();
                Console.WriteLine("countInteractions (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.countInteractions(false, true, true, trunkAt, rawLena); //count interactions but no need to write a file
                ///////reviiew time order
                Console.WriteLine("write10SecTalkingCSV (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                cd.write10SecTalkingCSV(configInfo.root + configInfo.classroom + "/SYNC/" + "10THOFSECTALKING_" + day.Month + "_" + day.Day + "_" + day.Year + ".CSV"); //write complete data files to disc
                cds.Add(cd);

                //cd.writeMergedFile();
            }
            summarize(cds, countSets, processLast);


        }
        public void summarize(List<ClassroomDay> cds, int c, Boolean processLast)
        {

            foreach (ClassroomDay cd in cds)
            {

                try
                {
                    Console.WriteLine("Summarizing " + cd.day.Month + " " + cd.day.Year + " " + cd.day.Day + " (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");
                    List<ClassroomDay> oneDay = new List<ClassroomDay>();//sync3_3pairactivity_vo8.CSV
                    oneDay.Add(cd);
                    Console.WriteLine("Summarizing ONE");
                    writeDataSummary(false,"PAIRACTIVITY_V41918"+c.ToString()+"_" + configInfo.classroom + "_" + (cd.justProx ? "no" : "") + "o_" + cd.day.Month + "_" + cd.day.Day + "_" + cd.day.Year + ".csv", oneDay, true); //write summary data
                }
                catch (Exception e)
                {

                }
            }
            //mergeFiles("_vo4");
            Console.WriteLine("Summarizing ALL " + " (" + DateTime.Now.ToLongDateString() + " " + DateTime.Now.ToLongTimeString() + "):");

            writeDataSummary(c > 0, "PAIRACTIVITY__ALL_" + fileName + configInfo.classroom + (cds.Count > 0 ? cds[0].day.Year.ToString() : "") + ".CSV", cds, processLast); //write summary data
        }
        public static Tuple<String, String, String> getMetrics(String prefix, String prefixp, PersonInfo info, PersonInfo infop, Boolean absent, Boolean absentp) 
        {
            String title = "";
            String values = "";
            String valuesInverse = "";


            title += (prefix + "Voc Dur,");
            values+=(absent?"NA":info.vd + ",");
            title += (prefixp + "Voc Dur,");
            values+=(absentp ? "NA" : infop.vd + ",");
            valuesInverse += (absentp ? "NA" : infop.vd + ",");
            valuesInverse += (absent ? "NA" : info.vd + ",");

            title += (prefix + "Voc Count,");
            values+=(absent ? "NA" : info.vc + ",");
            title += (prefixp + "Voc Count,");
            values+=(absentp ? "NA" : infop.vc + ",");
            valuesInverse += (absentp ? "NA" : infop.vc + ",");
            valuesInverse += (absent ? "NA" : info.vc + ",");

            title += (prefix + "Turn Count,");
            values+=(absent ? "NA" : info.tc + ",");
            title += (prefixp + "Turn Count,");
            values+=(absentp ? "NA" : infop.tc + ",");
            valuesInverse += (absentp ? "NA" : infop.tc + ",");
            valuesInverse += (absent ? "NA" : info.tc + ",");

            title += (prefix + "Adult Count,");
            values+=(absent ? "NA" : info.ac + ",");
            title += (prefixp + "Adult Count,");
            values+=(absentp ? "NA" : infop.ac + ",");
            valuesInverse += (absentp ? "NA" : infop.ac + ",");
            valuesInverse += (absent ? "NA" : info.ac + ",");

            title += (prefix + "Noise,");
            values+=(absent ? "NA" : info.no + ",");
            title += (prefixp + "Noise,");
            values+=(absentp ? "NA" : infop.no + ",");
            valuesInverse += (absentp ? "NA" : infop.no + ",");
            valuesInverse += (absent ? "NA" : info.no + ",");

            title += (prefix + "OLN,");
            values+=(absent ? "NA" : info.oln + ",");
            title += (prefixp + "OLN,");
            values+=(absentp ? "NA" : infop.oln + ",");
            valuesInverse += (absentp ? "NA" : infop.oln + ",");
            valuesInverse += (absent ? "NA" : info.oln + ",");
            return new Tuple<string, string, string>(title, values,valuesInverse);

        }
        public static void setMetrics(ref String t, ref String v, ref String i, Tuple<String,String,String> ms)
        {
            t += ms.Item1;// +",";
            v += ms.Item2;// + ",";
            i += ms.Item3;// + ",";
        }
        public static Tuple<String, String, String> getMetrics(String prefixAll, String prefixpAll, String prefix, String prefixp, PersonInfo infoAll, PersonInfo infopAll, PersonInfo info, PersonInfo infop, Boolean absent, Boolean absentp)
        {
            String title = "";
            String values = "";
            String valuesInverse = "";
            Tuple<String, String, String> ms = getMetrics(prefixAll + " VD", prefix + " VD", prefixpAll + " VD", 
                                                          prefixp + " VD", infoAll.vd, info.vd, infopAll.vd, infop.vd, absent, absentp);
            setMetrics(ref title, ref values, ref valuesInverse, ms);


            ms = getMetrics(prefixAll + " VC", prefix + " VC", prefixpAll + " VC",
                                                          prefixp + " VC", infoAll.vc, info.vc, infopAll.vc, infop.vc, absent, absentp);
            setMetrics(ref title, ref values, ref valuesInverse, ms);


            ms = getMetrics(prefixAll + " TC", prefix + " TC", prefixpAll + " TC",
                                                          prefixp + " TC", infoAll.tc, info.tc, infopAll.tc, infop.tc, absent, absentp);
            setMetrics(ref title, ref values, ref valuesInverse, ms);


            ms = getMetrics(prefixAll + " AC", prefix + " AC", prefixpAll + " AC",
                                                          prefixp + " AC", infoAll.ac, info.ac, infopAll.ac, infop.ac, absent, absentp);
            setMetrics(ref title, ref values, ref valuesInverse, ms);


            ms = getMetrics(prefixAll + " NO", prefix + " NO", prefixpAll + " NO",
                                                          prefixp + " NO", infoAll.no, info.no, infopAll.no, infop.no, absent, absentp);
            setMetrics(ref title, ref values, ref valuesInverse, ms);


            ms = getMetrics(prefixAll + " OLN", prefix + " OLN", prefixpAll + " OLN",
                                                          prefixp + " OLN", infoAll.oln, info.oln, infopAll.oln, infop.oln, absent, absentp);
            setMetrics(ref title, ref values, ref valuesInverse, ms);

            return new Tuple<string, string, string>(title, values, valuesInverse);

        }
        public static Tuple<String, String, String> getMetrics(String prefixAll, String prefixpAll, String prefix, String prefixp, double infoAll, double infopAll, double info, double infop, Boolean absent, Boolean absentp)
        {
            String title = "";
            String values = "";
            String valuesInverse = "";

            title += (prefix) + ",";
            title += (prefixAll) + ",";
            title += (prefixp) + ",";
            title += (prefixpAll) + ",";

            values += (info + ",");
            values += (infoAll + ",");
            values += (infop + ","); 
            values += (infopAll + ",");

            valuesInverse += (infop + ",");
            valuesInverse += (infopAll + ",");
            valuesInverse += (info + ",");
            valuesInverse += (infoAll + ",");
             
            return new Tuple<string, string, string>(title, values, valuesInverse);

        }
 
        public static String[] writePairLine(ClassroomDay day, String pair, String date)
        {
            String[] lines = new String[2];
            String subject = pair.Split('-')[0];
            String partner = pair.Split('-')[1];
            if (subject == "10B" && partner == "1B" || subject == "1B" && partner == "10B")
            {
                int iii = 0;
            }
            Boolean sAbsent = day.cf.getMapping(subject, day.day).isAbsent(day.day);//|| (!day.startLenaTimes.ContainsKey(subject));// false;
            Boolean pAbsent = day.cf.getMapping(partner, day.day).isAbsent(day.day);//|| (!day.startLenaTimes.ContainsKey(partner)); ;
            Boolean lAbsent = (!day.startLenaTimes.ContainsKey(subject)) || (!day.startLenaTimes.ContainsKey(partner));
            Boolean dAbsent = !day.pairStatsSep.ContainsKey(pair);
            Boolean absent = sAbsent || pAbsent || dAbsent || lAbsent;

            sAbsent = absent;
            pAbsent = absent;
            dAbsent = absent;
            lAbsent = absent;

            // dAbsent = dAbsent || lAbsent;
            double interactionTime = 0;
            double VD = 0;
            double subjectTurnCount = 0;
            double partnerTurnCount = 0;
            double subjectVocCount = 0;
            double partnerVocCount = 0;
            double subjectVocDur = 0;
            double partnerVocDur = 0;
            double subjectAdCount = 0;
            double partnerAdCount = 0; //Math.Round(day.pairStatsSep[pair].p2.ac, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
            double subjectNoise = 0; //Math.Round(day.pairStatsSep[pair].p1.no, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
            double partnerNoise = 0; //Math.Round(day.pairStatsSep[pair].p2.no, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
            double subjectOln = 0; //Math.Round(day.pairStatsSep[pair].p1.oln, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
            double partnerOln = 0; // Math.Round(day.pairStatsSep[pair].p2.oln, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
            double subjectInteractionTime = 0; //Math.Round(day.pairStatsSeparated[pair].Item1, 2);
            double partnerInteractionTime = 0; //Math.Round(day.pairStatsSeparated[pair].Item2, 2);
            double proximityTime = 0; //Math.Round(day.pairClose[pair], 2) / 2;
            double proximityOrientationTime = 0; // Math.Round(day.pairCloseOrientation[pair], 2) / 2;
            double sharedTime = 0; // Math.Round(day.pairTime[pair], 2) / 2; //check on this. correct. 
            double subjectTime = 0; // Math.Round(day.individualTime[subject], 2);
            double partnerTime = 0; //Math.Round(day.individualTime[partner], 2);
            double recordingTime = (day.endTime.Hour - day.startTime.Hour) * 60 * 60 + (day.endTime.Minute - day.startTime.Minute) * 60 + (day.endTime.Second - day.startTime.Second) + (day.endTime.Millisecond - day.startTime.Millisecond) / 1000;
            
             
            String subjectLine = "";
            String partnerLine = "";
            if (!sAbsent)
            {


                if (day.individualTime.ContainsKey(subject))
                    subjectTime = Math.Round(day.individualTime[subject], 2);
                else
                {
                    subjectTime = 0;
                    // absent = true;

                }

            }
            if (!pAbsent)
            {

                if (day.individualTime.ContainsKey(partner))
                    partnerTime = Math.Round(day.individualTime[partner], 2);
                else
                {
                    partnerTime = 0;
                    //absent = true;

                }


            }
            if ((!dAbsent) && (!sAbsent))
            {
                subjectTurnCount = Math.Round(day.pairStatsSep[pair].p1.tc, 2);
                subjectVocCount = Math.Round(day.pairStatsSep[pair].p1.vc, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
                subjectVocDur = Math.Round(day.pairStatsSep[pair].p1.vd, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
                subjectAdCount = Math.Round(day.pairStatsSep[pair].p1.ac, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
                subjectNoise = Math.Round(day.pairStatsSep[pair].p1.no, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
                subjectOln = Math.Round(day.pairStatsSep[pair].p1.oln, 2);//.Round(day.pairStatsSeparatedVC[pair].Item1, 2);
                subjectInteractionTime = Math.Round(day.pairStatsSeparated[pair].Item1, 2); partnerTurnCount = Math.Round(day.pairStatsSep[pair].p2.tc, 2);

            }
            if ((!dAbsent) && (!pAbsent))
            {
                partnerVocCount = Math.Round(day.pairStatsSep[pair].p2.vc, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
                partnerVocDur = Math.Round(day.pairStatsSep[pair].p2.vd, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
                partnerAdCount = Math.Round(day.pairStatsSep[pair].p2.ac, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
                partnerNoise = Math.Round(day.pairStatsSep[pair].p2.no, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
                partnerOln = Math.Round(day.pairStatsSep[pair].p2.oln, 2);// Math.Round(day.pairStatsSeparatedVC[pair].Item2, 2);
                partnerInteractionTime = Math.Round(day.pairStatsSeparated[pair].Item2, 2);

            }
            if (!dAbsent)
            {
                interactionTime = Math.Round(day.pairStats[pair], 2);
                VD = day.pairStatsSep[pair].p1.vd + day.pairStatsSep[pair].p2.vd;

                proximityTime = Math.Round(day.pairClose[pair], 2) / 2;
                proximityOrientationTime = Math.Round(day.pairCloseOrientation[pair], 2) / 2;
                sharedTime = Math.Round(day.pairTime[pair], 2) / 2; //check on this. correct. 
                recordingTime = (day.endTime.Hour - day.startTime.Hour) * 60 * 60 + (day.endTime.Minute - day.startTime.Minute) * 60 + (day.endTime.Second - day.startTime.Second) + (day.endTime.Millisecond - day.startTime.Millisecond) / 1000;
            }

            /* PersonInfo s = day.personTotalCounts.ContainsKey(subject) ? day.personTotalCounts[subject] : new PersonInfo();
             PersonInfo p = day.personTotalCountsWUbi.ContainsKey(subject) ? day.personTotalCountsWUbi[subject] : new PersonInfo();
             PersonInfo sUbi = day.personTotalCounts.ContainsKey(partner) ? day.personTotalCounts[partner] : new PersonInfo();
             PersonInfo pUbi = day.personTotalCountsWUbi.ContainsKey(partner) ? day.personTotalCountsWUbi[partner] : new PersonInfo() ;

              Tuple<String, String, String> metrics = getMetrics("Total ", "WUBI Total", "Partner Total ", "WUBI Partner Total",
                    s,
                    p,
                    sUbi,
                    pUbi, sAbsent, pAbsent);////
                    */

            PersonInfo s = day.personTotalCounts.ContainsKey(subject) ? day.personTotalCounts[subject] : new PersonInfo();
            PersonInfo sUbi = day.personTotalCountsWUbi.ContainsKey(subject) ? day.personTotalCountsWUbi[subject] : new PersonInfo();
            PersonInfo p = day.personTotalCounts.ContainsKey(partner) ? day.personTotalCounts[partner] : new PersonInfo();
            PersonInfo pUbi = day.personTotalCountsWUbi.ContainsKey(partner) ? day.personTotalCountsWUbi[partner] : new PersonInfo();

            //getMetrics(String prefixAll, String prefixpAll, String prefix, String prefixp, PersonInfo infoAll, PersonInfo infopAll, PersonInfo info, PersonInfo infop, Boolean absent, Boolean absentp)
            
                Tuple<String, String, String> metrics = getMetrics("Total ", "WUBI Total", "Partner Total ", "WUBI Partner Total",
                   s,
                   sUbi,
                   p,
                   pUbi, sAbsent, pAbsent);////



            subjectLine = (//date + "," + subject + "," + partner + "," + adult + "," +
                   (absent ? "NA" : VD.ToString()) + "," + (absent ? "NA" : interactionTime.ToString()) + "," +
                   (sAbsent ? "NA" : subjectInteractionTime.ToString()) + "," +
                   (pAbsent ? "NA" : partnerInteractionTime.ToString()) + "," +
                   (sAbsent ? "NA" : subjectVocDur.ToString()) + "," +
                   (pAbsent ? "NA" : partnerVocDur.ToString()) + "," +
                   (sAbsent ? "NA" : subjectTurnCount.ToString()) + "," +
                   (pAbsent ? "NA" : partnerTurnCount.ToString()) + "," +
                   (sAbsent ? "NA" : subjectVocCount.ToString()) + "," +
                   (pAbsent ? "NA" : partnerVocCount.ToString()) + "," +
                   (sAbsent ? "NA" : subjectAdCount.ToString()) + "," +
                   (pAbsent ? "NA" : partnerAdCount.ToString()) + "," +
                   (sAbsent ? "NA" : subjectNoise.ToString()) + "," +
                   (pAbsent ? "NA" : partnerNoise.ToString()) + "," +
                   (absent ? "NA" : proximityTime.ToString()) + "," +
                   (absent ? "NA" : proximityOrientationTime.ToString()) + "," +
                   (absent ? "NA" : sharedTime.ToString()) + "," +
                   (sAbsent ? "NA" : subjectTime.ToString()) + "," +
                   (pAbsent ? "NA" : partnerTime.ToString()) + "," +
                   (absent ? "NA" : recordingTime.ToString()) + "," +
                    metrics.Item2);
            
                partnerLine = (//date + "," + partner + "," + subject + "," + adult + "," +
                    (absent ? "NA" : VD.ToString()) + "," +
                    (absent ? "NA" : interactionTime.ToString()) + "," +
                    (pAbsent ? "NA" : partnerInteractionTime.ToString()) + "," +
                    (sAbsent ? "NA" : subjectInteractionTime.ToString()) + "," +
                    (pAbsent ? "NA" : partnerVocDur.ToString()) + "," +
                    (sAbsent ? "NA" : subjectVocDur.ToString()) + "," +
                    (pAbsent ? "NA" : partnerTurnCount.ToString()) + "," +
                    (sAbsent ? "NA" : subjectTurnCount.ToString()) + "," +
                    (pAbsent ? "NA" : partnerVocCount.ToString()) + "," +
                    (sAbsent ? "NA" : subjectVocCount.ToString()) + "," +
                    (pAbsent ? "NA" : partnerAdCount.ToString()) + "," +
                    (sAbsent ? "NA" : subjectAdCount.ToString()) + "," +
                    (pAbsent ? "NA" : partnerNoise.ToString()) + "," +
                    (sAbsent ? "NA" : subjectNoise.ToString()) + "," +
                    (absent ? "NA" : proximityTime.ToString()) + "," +
                    (absent ? "NA" : proximityOrientationTime.ToString()) + "," +
                    (absent ? "NA" : sharedTime.ToString()) + "," +
                    (pAbsent ? "NA" : partnerTime.ToString()) + "," +
                    (sAbsent ? "NA" : subjectTime.ToString()) + "," +
                    (absent ? "NA" : recordingTime.ToString()) + "," +
                     metrics.Item3);

            lines[0] = subjectLine;
            lines[1] = partnerLine;
                return lines;
        }
        public static void writeDataSummary(Boolean append, String file_name, List<ClassroomDay> days, Boolean processLast)
        {
            using (TextWriter sw = new StreamWriter(file_name, append: append))
            {
                //String title = ",Pair Talking Duration, Subject Talking Duration, Partner Talking Duration,Pair Turn Count, Subject Turn Count, Partner Turn Count, Pair Proximity Duration, Pair Orientation-Proximity Duration, Shared Time in Classroom, Subject Time, Partner Time, Total Recording Time, Total Voc Duration, Total Voc Count, Total Turn Count, Total Partner Voc Duration, Total Partner Voc Count, Total Partner Turn Count";
                String title = "Pair Block Talking,Pair Talking Duration, " +
                    "Subject-Talking-Duration-From_Start,Partner-Talking-Duration-From-Start, " +
                    "Subject-Talking-Duration-Evenly-Spread,Partner-Talking-Duration-Evenly-Spread, " +
                    "Subject Turn Count, Partner Turn Count, Subject Voc Count, Partner Voc Count, " +
                    "Subject Adult Count, Partner Adult Count, Subject Noise, Partner Noise, " +
                    "Pair Proximity Duration, Pair Orientation-Proximity Duration, Shared Time in Classroom, Subject Time, " +
                    "Partner Time, Total Recording Time, " +
                   //14 "Total Voc Duration, Total Voc Count, Total Turn Count, Total Adult Count, Total Noise," +
                   // "Total Partner Voc Duration, Total Partner Voc Count, Total Partner Turn Count, Total Partner Adult Count, Total Partner Noise, Subject Oln,Partner Oln, Total Subject Oln, Total Partner Oln," +
                    ""; //" Total Subject VCUbi, Total Partner VCUbi";
                title += getMetrics(" Total ", "WUBI Total", "Partner Total ", "WUBI Partner Total", new PersonInfo(), new PersonInfo(), new PersonInfo(), new PersonInfo(),false,false).Item1;//getMetrics("WUBI Total ", "WUBI Partner Total", new PersonInfo(), new PersonInfo()).Item1;
                sw.Write("Date, Subject, Partner, Adult?," + title);
                sw.WriteLine("Lead_"+title.Replace(",", ",Lead_"));
                int idx = 0;
                foreach (ClassroomDay day in days)
                {
                    String date = day.startTime.ToShortDateString();
                    idx++;
                    if (idx < days.Count || processLast)
                    {
                        foreach (String pair in day.cf.pairs) //day.pairStats.Keys)
                        {

                            String subject = pair.Split('-')[0];
                            String partner = pair.Split('-')[1];
                            String[] lines = writePairLine(day, pair, date);
                            Boolean adult = false;
                            if (partner.Contains("T") || partner.Contains("Lab") || subject.Contains("T") || subject.Contains("Lab"))
                            {
                                adult = true;
                            }
                            String subjectLine = date + "," + subject + "," + partner + "," + adult + "," + lines[0];
                            String partnerLine = date + "," + partner + "," + subject + "," + adult + "," + lines[1];
  
                                String partnerLine2 = new StringBuilder().Insert(0, "NA,", 26*2).ToString();
                                String subjectLine2 = new StringBuilder().Insert(0, "NA,", 26*2).ToString();
                                if (idx < days.Count)
                                {
                                    ClassroomDay nextDay = days[idx];
                                    String pairN = pair.Split('-')[1] + "-" + pair.Split('-')[0];
                                    Boolean inversePair = true;
                                    
                                    if (nextDay.pairStatsSep.ContainsKey(pair))
                                    {
                                        pairN = pair;
                                        inversePair = false;
                                    }
                                    else if (!nextDay.pairStatsSep.ContainsKey(pairN))
                                    {
                                        pairN = "";
                                    }
                                    if (pairN.Trim() != "")// && 
                                                           //nextDay.startLenaTimes.ContainsKey(partner) && 
                                                           //nextDay.startLenaTimes.ContainsKey(subject)&&
                                                           //nextDay.pairStatsSep.ContainsKey(pairN))
                                    {

                                    String[] linesN = writePairLine(nextDay,pairN,nextDay.startTime.ToShortDateString());
                                     



                                        if (!inversePair)
                                        {
                                            subjectLine2 = linesN[0];
                                            partnerLine2 = linesN[1];
                                        }
                                        else
                                        {
                                            subjectLine2 = linesN[1];
                                            partnerLine2 = linesN[0];
                                        }
                                    }

                                }

                                sw.WriteLine(subjectLine+subjectLine2);// date + "," + subject + "," + partner + "," + adult + "," + interactionTime + "," + subjectInteractionTime + "," + partnerInteractionTime + "," + proximityTime + "," + proximityOrientationTime + "," + sharedTime + "," + subjectTime + "," + partnerTime + "," + recordingTime + "," + totalVocDur + "," + totalVocCount + "," + totalTurnCount);
                                sw.WriteLine(partnerLine+ partnerLine2);// date + "," + partner + "," + subject + "," + adult + "," + interactionTime + "," + partnerInteractionTime + "," + subjectInteractionTime + "," + proximityTime + "," + proximityOrientationTime + "," + sharedTime + "," + partnerTime + "," + subjectTime + "," + recordingTime + "," + ptotalVocDur + "," + ptotalVocCount + "," + ptotalTurnCount);

                            
                        }
                    }

                }
            }
        }
    }

    class UL_PROCESSOR_Program
    {
        public void processLadyBugs1(String version)
        {
            Console.WriteLine("PROCESSING LB1");
            UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
            new List<DateTime>() {
                new DateTime(2017, 3, 3) ,
                 new DateTime(2017, 3, 10) }, version + "_1");
            Console.WriteLine("PROCESSING LB1 1");
            ul.process(true);
            /*

            Console.WriteLine("PROCESSING LB1");
            UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
            new List<DateTime>() {
                new DateTime(2017, 3, 3) ,
                 new DateTime(2017, 3, 10),
                 new DateTime(2017, 3, 17),
                 new DateTime(2017, 3, 31),
                 new DateTime(2017, 4, 7)}, version+"_1");
            Console.WriteLine("PROCESSING LB1 1");
            ul.process(false);

            UL_CLASS_PROCESSOR_Program ul2 = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
            new List<DateTime>() {
                 new DateTime(2017, 4, 7),
                 new DateTime(2017, 4, 21),
                 new DateTime(2017, 4, 28),
                 new DateTime(2017, 5, 12)}, version + "_2");
            Console.WriteLine("PROCESSING LB1 2");
            ul2.process(false);

            UL_CLASS_PROCESSOR_Program ul3 = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
            new List<DateTime>() {
                 new DateTime(2017, 5, 12),
                 new DateTime(2017, 5, 19),
                 new DateTime(2017, 5, 26)}, version + "_3");

            Console.WriteLine("PROCESSING LB1 3");
            ul3.process(true);*/
        }
        public void processLadyBugs2(String version)
        {
            Console.WriteLine("PROCESSING LB2");
             UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS2"),
             new List<DateTime>() {
                   new DateTime(2017, 10, 24) ,
                   new DateTime(2017, 11, 3),
                   new DateTime(2017, 11, 17),
                   new DateTime(2017, 12, 14) }, version + "_1");
             Console.WriteLine("PROCESSING LB2 1");

             ul.process(false);

             UL_CLASS_PROCESSOR_Program ul2 = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS2"),
             new List<DateTime>() {
                   new DateTime(2017, 12, 14),
                   new DateTime(2018, 1, 11),
                   new DateTime(2018, 2, 2),
                   new DateTime(2018, 2, 16)}, version + "_2");
             Console.WriteLine("PROCESSING LB2 2");

             ul2.process(false);

            UL_CLASS_PROCESSOR_Program ul3 = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS2"),
            new List<DateTime>() {
                 new DateTime(2018, 2, 16),
                 new DateTime(2018, 3, 13),
                 new DateTime(2018, 3, 20)}, version + "_3");
            Console.WriteLine("PROCESSING LB2 2");
            ul3.process(true);
        }
        public void processPandas(String version)
        {
            Console.WriteLine("PROCESSING PANDAS");
            UL_CLASS_PROCESSOR_Program ul = ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "PANDAS"),
               new List<DateTime>() {
                 new DateTime(2018, 2, 1) ,
                 new DateTime(2018, 2, 8),
                 new DateTime(2018, 3, 1)
               }, version);
            Console.WriteLine("PROCESSING PANDAS 1");
            ul.process(true); 
        }

        static void Main(string[] args)
        {

            // p.processPandas("V04102018");
            UL_PROCESSOR_Program p = new UL_PROCESSOR_Program();
            p.processLadyBugs1("V05022018_"+new Random().Next());
            //p = new UL_PROCESSOR_Program();
            //p.processLadyBugs2("V04202018");


            /*( UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "PANDAS"),
                 new List<DateTime>() {


                  new DateTime(2018, 2, 1) ,
                  new DateTime(2018, 2, 8),
                  new DateTime(2018, 3, 1)
                 }, "V03072018");//,  */


            /*   UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
            new List<DateTime>() {
                new DateTime(2017, 3, 3) ,
                 new DateTime(2017, 3, 10),
                 new DateTime(2017, 3, 17),
                 new DateTime(2017, 3, 31),  
                 new DateTime(2017, 4, 7)},"V030818_1");  */

            /* UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
             new List<DateTime>() {
                  new DateTime(2017, 4, 7), 
                  new DateTime(2017, 4, 21),
                  new DateTime(2017, 4, 28),  
                  new DateTime(2017, 5, 12)}, "V030818_2");

             UL_CLASS_PROCESSOR_Program ul2 = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS1"),
             new List<DateTime>() {
                  new DateTime(2017, 5, 12), 
                  new DateTime(2017, 5, 19),
                  new DateTime(2017, 5, 26)},"V030818_3");  */

            /* UL_CLASS_PROCESSOR_Program ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "LADYBUGS2"),
               new List<DateTime>() {
                    new DateTime(2017, 10, 24) ,
                    new DateTime(2017, 11, 3),
                    new DateTime(2017, 11, 17),
                    new DateTime(2017, 12, 14),
                    new DateTime(2018, 1, 11),
                    new DateTime(2018, 2, 2),
                    new DateTime(2018, 2, 16)},"_V0402018_");*/

            /* UL_CLASS_PROCESSOR_Program ul = ul = new UL_CLASS_PROCESSOR_Program(new Config("C://LVL//", "PANDAS"),
               new List<DateTime>() {
                 new DateTime(2018, 2, 1) ,
                 new DateTime(2018, 2, 8),
                 new DateTime(2018, 3, 1)
               }, "V032918");*/

            // ul.process(true);
            //FileComparer fc = new FileComparer();
            // fc.compareFiles(new int[] { 0, 1 }, "C://LVL/LADYBUGS2/SYNC/data_allcounts_v2o_sync10_24_2017.CSV.CSV", "C://LVL/LADYBUGS2/SYNC/10THOFSECTALKING_10_24_2017.CSV");
            Console.WriteLine("DONE");
            Console.ReadLine();
        }
    }
}
